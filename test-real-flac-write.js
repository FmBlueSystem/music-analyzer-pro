#!/usr/bin/env node

/**
 * üî• PRUEBA REAL: Escritura de metadatos FLAC con bot√≥n LLM
 * ESCRIBIR METADATOS REALES AL ARCHIVO ZZ TOP
 */

const path = require('path');
const MetadataWriter = require('./metadata-writer');
const MusicDatabase = require('./database');

async function testRealFLACWrite() {
    console.log('üî• PRUEBA REAL: Escritura de metadatos FLAC - ZZ Top');
    console.log('==================================================');
    
    const testFilePath = '/Volumes/My Passport/Ojo otra vez muscia de Tidal Original descarga de musica/Consolidado2025/Tracks/ZZ Top - Legs (Dance Mix) [2003 Remaster].flac';
    
    try {
        // Inicializar sistemas
        const database = new MusicDatabase();
        await database.initialize();
        console.log('‚úÖ Base de datos inicializada');
        
        const metadataWriter = new MetadataWriter();
        console.log('‚úÖ MetadataWriter inicializado');
        
        console.log(`\nüìñ ANTES: Leyendo metadatos existentes...`);
        const beforeMetadata = await metadataWriter.readExistingMetadata(testFilePath);
        
        console.log('üìÑ METADATOS ANTES DE LA ESCRITURA:');
        console.log(`- T√≠tulo: ${beforeMetadata.metadata?.title || 'Desconocido'}`);
        console.log(`- Artista: ${beforeMetadata.metadata?.artist || 'Desconocido'}`);
        console.log(`- G√©nero actual: ${beforeMetadata.metadata?.genre || 'Sin definir'} ‚ö†Ô∏è`);
        
        // Datos LLM reales para escribir (igual que en la simulaci√≥n)
        const realLLMResults = {
            LLM_DESCRIPTION: "Remix dance de la cl√°sica canci√≥n 'Legs' de ZZ Top. Esta versi√≥n dance de 2003 transforma el blues rock texano original en una interpretaci√≥n bailable, manteniendo los elementos caracter√≠sticos de la banda pero adaptados para la pista de baile.",
            LLM_MOOD: "Energetic",
            LLM_GENRE: "Dance Rock", // ‚úÖ CORRECCI√ìN REAL: Sin definir ‚Üí Dance Rock
            LLM_SUBGENRE: "Rock Remix",
            LLM_CONTEXT: "2000s Dance Remix Culture - Texas Rock Heritage",
            LLM_OCCASIONS: ["Club Night", "Dance Floor", "Retro Party"],
            LLM_ENERGY_LEVEL: "Alto",
            LLM_DANCEABILITY: "Alta", 
            LLM_RECOMMENDATIONS: "Ideal para sets que combinan rock cl√°sico con elementos dance. Perfecto para transiciones entre rock y m√∫sica electr√≥nica.",
            
            // Placeholders AI_* con nombres de algoritmos REALES
            AI_ACOUSTICNESS: "ALGORITMO SPECTRAL_ANALYSIS",
            AI_ANALYZED: "ALGORITMO COMPLETION_TRACKER",
            AI_BPM: "ALGORITMO BEAT_TRACKING",
            AI_CHARACTERISTICS: "ALGORITMO FEATURE_EXTRACTION",
            AI_CONFIDENCE: "ALGORITMO CONFIDENCE_CALCULATOR", 
            AI_CULTURAL_CONTEXT: "ALGORITMO CULTURAL_ANALYZER",
            AI_DANCEABILITY: "ALGORITMO DANCEABILITY_DETECTOR",
            AI_ENERGY: "ALGORITMO ENERGY_ANALYZER",
            AI_ERA: "ALGORITMO ERA_CLASSIFIER",
            AI_INSTRUMENTALNESS: "ALGORITMO VOCAL_DETECTION",
            AI_KEY: "ALGORITMO KEY_DETECTION",
            AI_LIVENESS: "ALGORITMO LIVENESS_DETECTION",
            AI_LOUDNESS: "ALGORITMO LOUDNESS_ANALYSIS",
            AI_MODE: "ALGORITMO MODE_DETECTION",
            AI_MOOD: "ALGORITMO MOOD_CLASSIFIER",
            AI_OCCASION: "ALGORITMO OCCASION_PREDICTOR",
            AI_SPEECHINESS: "ALGORITMO SPEECH_DETECTION",
            AI_SUBGENRES: "ALGORITMO SUBGENRE_CLASSIFIER",
            AI_TIME_SIGNATURE: "ALGORITMO TIME_SIGNATURE_DETECTION",
            AI_VALENCE: "ALGORITMO VALENCE_ANALYZER"
        };
        
        console.log('\nüî• EJECUTANDO ESCRITURA REAL DE METADATOS...');
        console.log('===============================================');
        
        // ‚úÖ ESCRITURA REAL AL ARCHIVO FLAC
        const writeResult = await metadataWriter.writeLLMMetadataSafe(testFilePath, realLLMResults, true);
        
        if (writeResult.success) {
            console.log('‚úÖ ESCRITURA EXITOSA AL ARCHIVO FLAC');
            console.log(`üìù Campos escritos: ${writeResult.fieldsWritten}`);
            console.log(`üéµ M√©todo usado: ${writeResult.method}`);
        } else {
            console.log('‚ùå ERROR EN ESCRITURA:', writeResult.error);
            return;
        }
        
        // Verificar que los metadatos se escribieron correctamente
        console.log('\nüîç VERIFICACI√ìN: Leyendo metadatos despu√©s de escritura...');
        const afterMetadata = await metadataWriter.readExistingMetadata(testFilePath);
        
        console.log('\nüìÑ METADATOS DESPU√âS DE LA ESCRITURA:');
        console.log(`- T√≠tulo: ${afterMetadata.metadata?.title || 'Desconocido'}`);
        console.log(`- Artista: ${afterMetadata.metadata?.artist || 'Desconocido'}`);
        console.log(`- G√©nero NUEVO: ${afterMetadata.metadata?.genre || 'Sin cambios'} üéØ`);
        
        // Verificar campos LLM espec√≠ficos
        console.log('\nüß† CAMPOS LLM ESCRITOS EN EL ARCHIVO:');
        console.log(`- LLM_GENRE: ${afterMetadata.tags?.LLM_GENRE || 'No encontrado'}`);
        console.log(`- LLM_MOOD: ${afterMetadata.tags?.LLM_MOOD || 'No encontrado'}`);
        console.log(`- LLM_DESCRIPTION: ${afterMetadata.tags?.LLM_DESCRIPTION?.substring(0, 50) || 'No encontrado'}...`);
        
        // Verificar campos AI_* placeholders
        console.log('\nüîß CAMPOS AI_* PLACEHOLDERS EN EL ARCHIVO:');
        console.log(`- AI_ACOUSTICNESS: ${afterMetadata.tags?.AI_ACOUSTICNESS || 'No encontrado'}`);
        console.log(`- AI_BPM: ${afterMetadata.tags?.AI_BPM || 'No encontrado'}`);
        console.log(`- AI_KEY: ${afterMetadata.tags?.AI_KEY || 'No encontrado'}`);
        console.log(`- AI_ENERGY: ${afterMetadata.tags?.AI_ENERGY || 'No encontrado'}`);
        
        // Actualizar base de datos tambi√©n
        console.log('\nüíæ ACTUALIZANDO BASE DE DATOS...');
        const dbFile = await database.getQuery('SELECT id, genre FROM audio_files WHERE file_path = ?', [testFilePath]);
        
        if (dbFile) {
            console.log(`üìù Archivo encontrado en BD (ID: ${dbFile.id})`);
            console.log(`üìä G√©nero antes en BD: "${dbFile.genre}"`);
            
            // Insertar metadatos LLM
            await database.insertLLMMetadata(dbFile.id, realLLMResults);
            console.log('‚úÖ Metadatos LLM insertados en base de datos');
            
            // Verificar actualizaci√≥n de g√©nero
            const updatedFile = await database.getQuery('SELECT genre FROM audio_files WHERE id = ?', [dbFile.id]);
            console.log(`üìä G√©nero despu√©s en BD: "${updatedFile.genre}"`);
            
        } else {
            console.log('‚ùå Archivo no encontrado en base de datos');
        }
        
        console.log('\nüéØ RESULTADO FINAL - ESCRITURA REAL COMPLETADA:');
        console.log('===============================================');
        console.log('1. ‚úÖ Archivo FLAC escrito con metadatos reales');
        console.log('2. ‚úÖ GENRE tag actualizado en archivo f√≠sico');
        console.log('3. ‚úÖ Todos los campos LLM_* escritos como Vorbis comments');
        console.log('4. ‚úÖ Todos los campos AI_* escritos con nombres de algoritmos');
        console.log('5. ‚úÖ Base de datos sincronizada con archivo');
        
        // Comparaci√≥n antes/despu√©s
        const genreBefore = beforeMetadata.metadata?.genre || 'Sin definir';
        const genreAfter = afterMetadata.metadata?.genre || 'Sin cambios';
        
        console.log('\nüîÑ COMPARACI√ìN ANTES/DESPU√âS:');
        console.log(`üìä G√©nero: "${genreBefore}" ‚Üí "${genreAfter}"`);
        
        if (genreAfter === "Dance Rock") {
            console.log('üéâ ¬°√âXITO! G√©nero corregido correctamente en archivo f√≠sico');
        } else {
            console.log('‚ö†Ô∏è Verificar: Posible problema en escritura de g√©nero');
        }
        
        await database.close();
        
    } catch (error) {
        console.error('‚ùå Error en prueba real:', error);
    }
}

// Ejecutar prueba real
if (require.main === module) {
    testRealFLACWrite().catch(console.error);
}

module.exports = { testRealFLACWrite };